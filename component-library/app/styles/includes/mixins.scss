/* stylelint-disable at-rule-empty-line-before */
@mixin media($key) {
    @if $key == 'd' {
        @content;
    } @else if map-has-key($breakpoints, $key) {
        @media (min-width: map-get($breakpoints, $key)) {
            @content;
        }
    } @else {
        @error 'Unfortunately, no value could be retrieved from `#{$breakpoints}`. Please make sure it is defined in `$breakpoints` map.';
    }
}

@mixin media-max($key) {
    @if $key == 'd' {
        @content;
    } @else if map-has-key($breakpoints, $key) {
        @media (max-width: (map-get($breakpoints, $key) - 1)) {
            @content;
        }
    } @else {
        @error 'Unfortunately, no value could be retrieved from `#{$breakpoints}`. Please make sure it is defined in `$breakpoints` map.';
    }
}

/* stylelint-enable at-rule-empty-line-before */

@mixin clearfix() {
    &::after,
    &::before {
        content: '';
        display: table;
        clear: both;
        width: 100%;
    }
}

@mixin href-external($domain: 'example.se') {
    &:not([href^="mailto:"]):not([href^="tel:"]):not([href=""]):not([href^="#"]):not([href^="/"]):not([href^="http://#{$domain}"]):not([href^="https://#{$domain}"]):not([href*="localhost"]):not([href*="stage.#{$domain}"]):not([href*="www.#{$domain}"]):not([href*="beta.#{$domain}"])
    {
        @content;
    }
}

@mixin href-download() {
    &[href$='.pdf'],
    &[href$='.doc'],
    &[href$='.docx'],
    &[href$='.ppt'],
    &[href$='.pptx'],
    &[href$='.xls'],
    &[href$='.xlsx'],
    &[href$='.odt'],
    &[href$='.eps'],
    &[href$='.zip'] {
        @content;
    }
}

// For wrapping elements in the main grid
// Usage: @include wrap;
@mixin wrap($exclude: ()) {
    @if not contains($exclude, d) {
        margin-left: map-get($spacings, d);
        margin-right: map-get($spacings, d);
    }

    @if not contains($exclude, S) {
        @include breakpoint-wrap(S);
    }

    @if not contains($exclude, SL) {
        @include breakpoint-wrap(SL);
    }

    @if not contains($exclude, M) {
        @include breakpoint-wrap(M);
    }

    @if not contains($exclude, ML) {
        @include breakpoint-wrap(ML);
    }

    @if not contains($exclude, L) {
        @include breakpoint-wrap(L);
    }

    @if not contains($exclude, XL) {
        @include breakpoint-wrap(XL);
    }

    @if not contains($exclude, XXL) {
        @include breakpoint-wrap(XXL);
    }
}

@mixin breakpoint-wrap($breakpoint) {
    @if map-has-key($maxwidths, $breakpoint) {
        $maxWidth: (map-get($maxwidths, $breakpoint));

        @if $fluid and map-has-key($spacings, $breakpoint) {
            $maxWidth: $maxWidth - (map-get($spacings, $breakpoint) * 2);
        }

        @include media($breakpoint) {
            max-width: $maxWidth;
            margin-left: auto;
            margin-right: auto;
        }
    }

    @if $fluid and map-has-key($spacings, $breakpoint) {
        @include media($breakpoint) {
            margin-left: (map-get($spacings, $breakpoint));
            margin-right: (map-get($spacings, $breakpoint));
        }
    }
}

// For setting font-size and line-height on elements defined by variabels, including media queries
// Usage: @include textstyle(h1);
@mixin textstyle($key) {
    // Loop through text map and set font-size and line-height for each media query
    @if map-has-key($textstyles, $key) {
        $map: map-get($textstyles, $key);

        @each $media, $style in $map {
            @include media($media) {
                @if map-has-key($style, font-size) and
                    map-has-key($style, line-height)
                {
                    $font-size: map-get($style, font-size);
                    $line-height: map-get($style, line-height);

                    font-size: #{$font-size / 10}rem;
                    line-height: #{round($line-height / $font-size * 100) /
                        100};
                }

                @each $param, $value in $style {
                    @if $param != 'font-size' and $param != 'line-height' {
                        #{$param}: $value;
                    }
                }
            }
        }
    }
}
