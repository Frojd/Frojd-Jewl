
@mixin media($key) {
    @if $key == 'd' {
        @content;
    }
    @else if map-has-key($breakpoints, $key) {
        @media (min-width: map-get($breakpoints, $key)) {
            @content;
        }
    } @else {
        @error 'Unfortunately, no value could be retrieved from `#{$breakpoints}`. '
        + 'Please make sure it is defined in `$breakpoints` map.';
    }
}

@mixin media-max($key) {
    @if $key == 'd' {
        @content;
    }
    @else if map-has-key($breakpoints, $key) {
        @media (max-width: map-get($breakpoints, $key)-1) {
            @content;
        }
    } @else {
        @error 'Unfortunately, no value could be retrieved from `#{$breakpoints}`. '
        + 'Please make sure it is defined in `$breakpoints` map.';
    }
}

@mixin clearfix() {
    &::after,
    &::before {
        content: '';
        display: table;
        clear: both;
        width: 100%;
    }
}

// For wrapping elements in the main grid
// Usage: @include wrap;
@mixin wrap($exclude: ()) {
    @if not contains($exclude, d) {
        margin-left: $gutter;
        margin-right: $gutter;
    }
    @if not contains($exclude, SL) {
        @include media(SL) {
            max-width: (map-get($maxwidths, SL));
            margin-left: auto;
            margin-right: auto;
        }
    }
    @if not contains($exclude, M) {
        @include media(M) {
            max-width: (map-get($maxwidths, M));
            margin-left: auto;
            margin-right: auto;
        }
    }
    @if not contains($exclude, ML) {
        @include media(ML) {
            max-width: (map-get($maxwidths, ML));
            margin-left: auto;
            margin-right: auto;
        }
    }
    @if not contains($exclude, L) {
        @include media(L) {
            max-width: (map-get($maxwidths, L));
            margin-left: auto;
            margin-right: auto;
        }
    }
    @if not contains($exclude, XL) {
        @include media(XL) {
            max-width: (map-get($maxwidths, XL));
            margin-left: auto;
            margin-right: auto;
        }
    }
    @if not contains($exclude, XXL) {
        @include media(XXL) {
            max-width: (map-get($maxwidths, XXL));
            margin-left: auto;
            margin-right: auto;
        }
    }
}

// For setting font-size and line-height on elements defined by variabels, including media queries
// Usage: @include textstyle(h1);
@mixin textstyle($key) {

    // Loop through text map and set font-size and line-height for each media query
    @if map-has-key($textstyles, $key) {
        $map: map-get($textstyles, $key);

        @each $media, $style in $map {
            @include media($media) {
                @if map-has-key($style, font-size) and map-has-key($style, line-height) {
                    $font-size: map-get($style, font-size);
                    $line-height: map-get($style, line-height);

                    font-size: #{$font-size / 10}rem;
                    line-height: #{round($line-height / $font-size * 100) / 100};
                }

                @each $param, $value in $style {
                    @if $param != 'font-size' and $param != 'line-height' {
                        #{$param}: $value;
                    }
                }
            }
        }
    }
}
